//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ./DotNet.CompiladoresProjetoFinal.App/ANTLR/VariableDeclaration.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class VariableDeclarationParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		CHAR=1, INT=2, FLOAT=3, IF=4, ELSE=5, SWITCH=6, CASE=7, DEFAULT=8, BREAK=9, 
		EQ=10, NEQ=11, LTEQ=12, GTEQ=13, LT=14, GT=15, LPAREN=16, RPAREN=17, LBRACE=18, 
		RBRACE=19, COLON=20, SEMI=21, COMMA=22, ASSIGN=23, Identifier=24, CHAR_LITERAL=25, 
		STRING_LITERAL=26, IntegerLiteral=27, FloatingLiteral=28, PLUS=29, MINUS=30, 
		STAR=31, DIV=32, WS=33;
	public const int
		RULE_program = 0, RULE_declaration = 1, RULE_selectionStatement = 2, RULE_switchStatement = 3, 
		RULE_caseBlockList = 4, RULE_caseBlock = 5, RULE_defaultBlock = 6, RULE_commandList = 7, 
		RULE_breakCommand = 8, RULE_mathCommand = 9, RULE_mathExpr = 10, RULE_condition = 11, 
		RULE_relOp = 12, RULE_typeSpecifier = 13, RULE_declaratorList = 14, RULE_declarator = 15, 
		RULE_initializer = 16;
	public static readonly string[] ruleNames = {
		"program", "declaration", "selectionStatement", "switchStatement", "caseBlockList", 
		"caseBlock", "defaultBlock", "commandList", "breakCommand", "mathCommand", 
		"mathExpr", "condition", "relOp", "typeSpecifier", "declaratorList", "declarator", 
		"initializer"
	};

	private static readonly string[] _LiteralNames = {
		null, "'char'", "'int'", "'float'", "'if'", "'else'", "'switch'", "'case'", 
		"'default'", "'break'", "'=='", "'!='", "'<='", "'>='", "'<'", "'>'", 
		"'('", "')'", "'{'", "'}'", "':'", "';'", "','", "'='", null, null, null, 
		null, null, "'+'", "'-'", "'*'", "'/'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "CHAR", "INT", "FLOAT", "IF", "ELSE", "SWITCH", "CASE", "DEFAULT", 
		"BREAK", "EQ", "NEQ", "LTEQ", "GTEQ", "LT", "GT", "LPAREN", "RPAREN", 
		"LBRACE", "RBRACE", "COLON", "SEMI", "COMMA", "ASSIGN", "Identifier", 
		"CHAR_LITERAL", "STRING_LITERAL", "IntegerLiteral", "FloatingLiteral", 
		"PLUS", "MINUS", "STAR", "DIV", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "VariableDeclaration.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static VariableDeclarationParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public VariableDeclarationParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public VariableDeclarationParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext[] declaration() {
			return GetRuleContexts<DeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext declaration(int i) {
			return GetRuleContext<DeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectionStatementContext[] selectionStatement() {
			return GetRuleContexts<SelectionStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectionStatementContext selectionStatement(int i) {
			return GetRuleContext<SelectionStatementContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVariableDeclarationListener typedListener = listener as IVariableDeclarationListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVariableDeclarationListener typedListener = listener as IVariableDeclarationListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 38;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 94L) != 0)) {
				{
				State = 36;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case CHAR:
				case INT:
				case FLOAT:
					{
					State = 34;
					declaration();
					}
					break;
				case IF:
				case SWITCH:
					{
					State = 35;
					selectionStatement();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 40;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeSpecifierContext typeSpecifier() {
			return GetRuleContext<TypeSpecifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclaratorListContext declaratorList() {
			return GetRuleContext<DeclaratorListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(VariableDeclarationParser.SEMI, 0); }
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVariableDeclarationListener typedListener = listener as IVariableDeclarationListener;
			if (typedListener != null) typedListener.EnterDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVariableDeclarationListener typedListener = listener as IVariableDeclarationListener;
			if (typedListener != null) typedListener.ExitDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 2, RULE_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 41;
			typeSpecifier();
			State = 42;
			declaratorList();
			State = 43;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectionStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(VariableDeclarationParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(VariableDeclarationParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(VariableDeclarationParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LBRACE() { return GetTokens(VariableDeclarationParser.LBRACE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE(int i) {
			return GetToken(VariableDeclarationParser.LBRACE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommandListContext[] commandList() {
			return GetRuleContexts<CommandListContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommandListContext commandList(int i) {
			return GetRuleContext<CommandListContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RBRACE() { return GetTokens(VariableDeclarationParser.RBRACE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE(int i) {
			return GetToken(VariableDeclarationParser.RBRACE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(VariableDeclarationParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SwitchStatementContext switchStatement() {
			return GetRuleContext<SwitchStatementContext>(0);
		}
		public SelectionStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectionStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVariableDeclarationListener typedListener = listener as IVariableDeclarationListener;
			if (typedListener != null) typedListener.EnterSelectionStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVariableDeclarationListener typedListener = listener as IVariableDeclarationListener;
			if (typedListener != null) typedListener.ExitSelectionStatement(this);
		}
	}

	[RuleVersion(0)]
	public SelectionStatementContext selectionStatement() {
		SelectionStatementContext _localctx = new SelectionStatementContext(Context, State);
		EnterRule(_localctx, 4, RULE_selectionStatement);
		int _la;
		try {
			State = 60;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IF:
				EnterOuterAlt(_localctx, 1);
				{
				State = 45;
				Match(IF);
				State = 46;
				Match(LPAREN);
				State = 47;
				condition();
				State = 48;
				Match(RPAREN);
				State = 49;
				Match(LBRACE);
				State = 50;
				commandList();
				State = 51;
				Match(RBRACE);
				State = 57;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ELSE) {
					{
					State = 52;
					Match(ELSE);
					State = 53;
					Match(LBRACE);
					State = 54;
					commandList();
					State = 55;
					Match(RBRACE);
					}
				}

				}
				break;
			case SWITCH:
				EnterOuterAlt(_localctx, 2);
				{
				State = 59;
				switchStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SWITCH() { return GetToken(VariableDeclarationParser.SWITCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(VariableDeclarationParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(VariableDeclarationParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(VariableDeclarationParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(VariableDeclarationParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CaseBlockListContext caseBlockList() {
			return GetRuleContext<CaseBlockListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(VariableDeclarationParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DefaultBlockContext defaultBlock() {
			return GetRuleContext<DefaultBlockContext>(0);
		}
		public SwitchStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVariableDeclarationListener typedListener = listener as IVariableDeclarationListener;
			if (typedListener != null) typedListener.EnterSwitchStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVariableDeclarationListener typedListener = listener as IVariableDeclarationListener;
			if (typedListener != null) typedListener.ExitSwitchStatement(this);
		}
	}

	[RuleVersion(0)]
	public SwitchStatementContext switchStatement() {
		SwitchStatementContext _localctx = new SwitchStatementContext(Context, State);
		EnterRule(_localctx, 6, RULE_switchStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 62;
			Match(SWITCH);
			State = 63;
			Match(LPAREN);
			State = 64;
			Match(Identifier);
			State = 65;
			Match(RPAREN);
			State = 66;
			Match(LBRACE);
			State = 67;
			caseBlockList();
			State = 69;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEFAULT) {
				{
				State = 68;
				defaultBlock();
				}
			}

			State = 71;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseBlockListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CaseBlockContext[] caseBlock() {
			return GetRuleContexts<CaseBlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseBlockContext caseBlock(int i) {
			return GetRuleContext<CaseBlockContext>(i);
		}
		public CaseBlockListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseBlockList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVariableDeclarationListener typedListener = listener as IVariableDeclarationListener;
			if (typedListener != null) typedListener.EnterCaseBlockList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVariableDeclarationListener typedListener = listener as IVariableDeclarationListener;
			if (typedListener != null) typedListener.ExitCaseBlockList(this);
		}
	}

	[RuleVersion(0)]
	public CaseBlockListContext caseBlockList() {
		CaseBlockListContext _localctx = new CaseBlockListContext(Context, State);
		EnterRule(_localctx, 8, RULE_caseBlockList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 74;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 73;
				caseBlock();
				}
				}
				State = 76;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==CASE );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(VariableDeclarationParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CommandListContext commandList() {
			return GetRuleContext<CommandListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(VariableDeclarationParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CASE() { return GetTokens(VariableDeclarationParser.CASE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASE(int i) {
			return GetToken(VariableDeclarationParser.CASE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Identifier() { return GetTokens(VariableDeclarationParser.Identifier); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier(int i) {
			return GetToken(VariableDeclarationParser.Identifier, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COLON() { return GetTokens(VariableDeclarationParser.COLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON(int i) {
			return GetToken(VariableDeclarationParser.COLON, i);
		}
		public CaseBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVariableDeclarationListener typedListener = listener as IVariableDeclarationListener;
			if (typedListener != null) typedListener.EnterCaseBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVariableDeclarationListener typedListener = listener as IVariableDeclarationListener;
			if (typedListener != null) typedListener.ExitCaseBlock(this);
		}
	}

	[RuleVersion(0)]
	public CaseBlockContext caseBlock() {
		CaseBlockContext _localctx = new CaseBlockContext(Context, State);
		EnterRule(_localctx, 10, RULE_caseBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 81;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 78;
				Match(CASE);
				State = 79;
				Match(Identifier);
				State = 80;
				Match(COLON);
				}
				}
				State = 83;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==CASE );
			State = 85;
			Match(LBRACE);
			State = 86;
			commandList();
			State = 87;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefaultBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(VariableDeclarationParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(VariableDeclarationParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(VariableDeclarationParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CommandListContext commandList() {
			return GetRuleContext<CommandListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(VariableDeclarationParser.RBRACE, 0); }
		public DefaultBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defaultBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVariableDeclarationListener typedListener = listener as IVariableDeclarationListener;
			if (typedListener != null) typedListener.EnterDefaultBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVariableDeclarationListener typedListener = listener as IVariableDeclarationListener;
			if (typedListener != null) typedListener.ExitDefaultBlock(this);
		}
	}

	[RuleVersion(0)]
	public DefaultBlockContext defaultBlock() {
		DefaultBlockContext _localctx = new DefaultBlockContext(Context, State);
		EnterRule(_localctx, 12, RULE_defaultBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 89;
			Match(DEFAULT);
			State = 90;
			Match(COLON);
			State = 91;
			Match(LBRACE);
			State = 92;
			commandList();
			State = 93;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommandListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MathCommandContext[] mathCommand() {
			return GetRuleContexts<MathCommandContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MathCommandContext mathCommand(int i) {
			return GetRuleContext<MathCommandContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BreakCommandContext[] breakCommand() {
			return GetRuleContexts<BreakCommandContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BreakCommandContext breakCommand(int i) {
			return GetRuleContext<BreakCommandContext>(i);
		}
		public CommandListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_commandList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVariableDeclarationListener typedListener = listener as IVariableDeclarationListener;
			if (typedListener != null) typedListener.EnterCommandList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVariableDeclarationListener typedListener = listener as IVariableDeclarationListener;
			if (typedListener != null) typedListener.ExitCommandList(this);
		}
	}

	[RuleVersion(0)]
	public CommandListContext commandList() {
		CommandListContext _localctx = new CommandListContext(Context, State);
		EnterRule(_localctx, 14, RULE_commandList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 99;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==BREAK || _la==Identifier) {
				{
				State = 97;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case Identifier:
					{
					State = 95;
					mathCommand();
					}
					break;
				case BREAK:
					{
					State = 96;
					breakCommand();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 101;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BreakCommandContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BREAK() { return GetToken(VariableDeclarationParser.BREAK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(VariableDeclarationParser.SEMI, 0); }
		public BreakCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_breakCommand; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVariableDeclarationListener typedListener = listener as IVariableDeclarationListener;
			if (typedListener != null) typedListener.EnterBreakCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVariableDeclarationListener typedListener = listener as IVariableDeclarationListener;
			if (typedListener != null) typedListener.ExitBreakCommand(this);
		}
	}

	[RuleVersion(0)]
	public BreakCommandContext breakCommand() {
		BreakCommandContext _localctx = new BreakCommandContext(Context, State);
		EnterRule(_localctx, 16, RULE_breakCommand);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 102;
			Match(BREAK);
			State = 103;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MathCommandContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(VariableDeclarationParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(VariableDeclarationParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MathExprContext mathExpr() {
			return GetRuleContext<MathExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(VariableDeclarationParser.SEMI, 0); }
		public MathCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mathCommand; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVariableDeclarationListener typedListener = listener as IVariableDeclarationListener;
			if (typedListener != null) typedListener.EnterMathCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVariableDeclarationListener typedListener = listener as IVariableDeclarationListener;
			if (typedListener != null) typedListener.ExitMathCommand(this);
		}
	}

	[RuleVersion(0)]
	public MathCommandContext mathCommand() {
		MathCommandContext _localctx = new MathCommandContext(Context, State);
		EnterRule(_localctx, 18, RULE_mathCommand);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 105;
			Match(Identifier);
			State = 106;
			Match(ASSIGN);
			State = 107;
			mathExpr(0);
			State = 108;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MathExprContext : ParserRuleContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IntegerLiteral() { return GetToken(VariableDeclarationParser.IntegerLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FloatingLiteral() { return GetToken(VariableDeclarationParser.FloatingLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(VariableDeclarationParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(VariableDeclarationParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MathExprContext[] mathExpr() {
			return GetRuleContexts<MathExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MathExprContext mathExpr(int i) {
			return GetRuleContext<MathExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(VariableDeclarationParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(VariableDeclarationParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(VariableDeclarationParser.DIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(VariableDeclarationParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(VariableDeclarationParser.MINUS, 0); }
		public MathExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mathExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVariableDeclarationListener typedListener = listener as IVariableDeclarationListener;
			if (typedListener != null) typedListener.EnterMathExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVariableDeclarationListener typedListener = listener as IVariableDeclarationListener;
			if (typedListener != null) typedListener.ExitMathExpr(this);
		}
	}

	[RuleVersion(0)]
	public MathExprContext mathExpr() {
		return mathExpr(0);
	}

	private MathExprContext mathExpr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		MathExprContext _localctx = new MathExprContext(Context, _parentState);
		MathExprContext _prevctx = _localctx;
		int _startState = 20;
		EnterRecursionRule(_localctx, 20, RULE_mathExpr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 118;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IntegerLiteral:
				{
				State = 111;
				Match(IntegerLiteral);
				}
				break;
			case FloatingLiteral:
				{
				State = 112;
				Match(FloatingLiteral);
				}
				break;
			case Identifier:
				{
				State = 113;
				Match(Identifier);
				}
				break;
			case LPAREN:
				{
				State = 114;
				Match(LPAREN);
				State = 115;
				mathExpr(0);
				State = 116;
				Match(RPAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 128;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 126;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
					case 1:
						{
						_localctx = new MathExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_mathExpr);
						State = 120;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 121;
						_localctx.op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==STAR || _la==DIV) ) {
							_localctx.op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 122;
						mathExpr(7);
						}
						break;
					case 2:
						{
						_localctx = new MathExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_mathExpr);
						State = 123;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 124;
						_localctx.op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==PLUS || _la==MINUS) ) {
							_localctx.op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 125;
						mathExpr(6);
						}
						break;
					}
					} 
				}
				State = 130;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ConditionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MathExprContext[] mathExpr() {
			return GetRuleContexts<MathExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MathExprContext mathExpr(int i) {
			return GetRuleContext<MathExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RelOpContext relOp() {
			return GetRuleContext<RelOpContext>(0);
		}
		public ConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVariableDeclarationListener typedListener = listener as IVariableDeclarationListener;
			if (typedListener != null) typedListener.EnterCondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVariableDeclarationListener typedListener = listener as IVariableDeclarationListener;
			if (typedListener != null) typedListener.ExitCondition(this);
		}
	}

	[RuleVersion(0)]
	public ConditionContext condition() {
		ConditionContext _localctx = new ConditionContext(Context, State);
		EnterRule(_localctx, 22, RULE_condition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 131;
			mathExpr(0);
			State = 132;
			relOp();
			State = 133;
			mathExpr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelOpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(VariableDeclarationParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEQ() { return GetToken(VariableDeclarationParser.NEQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(VariableDeclarationParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LTEQ() { return GetToken(VariableDeclarationParser.LTEQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(VariableDeclarationParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GTEQ() { return GetToken(VariableDeclarationParser.GTEQ, 0); }
		public RelOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVariableDeclarationListener typedListener = listener as IVariableDeclarationListener;
			if (typedListener != null) typedListener.EnterRelOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVariableDeclarationListener typedListener = listener as IVariableDeclarationListener;
			if (typedListener != null) typedListener.ExitRelOp(this);
		}
	}

	[RuleVersion(0)]
	public RelOpContext relOp() {
		RelOpContext _localctx = new RelOpContext(Context, State);
		EnterRule(_localctx, 24, RULE_relOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 135;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 64512L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeSpecifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR() { return GetToken(VariableDeclarationParser.CHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(VariableDeclarationParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(VariableDeclarationParser.FLOAT, 0); }
		public TypeSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeSpecifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVariableDeclarationListener typedListener = listener as IVariableDeclarationListener;
			if (typedListener != null) typedListener.EnterTypeSpecifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVariableDeclarationListener typedListener = listener as IVariableDeclarationListener;
			if (typedListener != null) typedListener.ExitTypeSpecifier(this);
		}
	}

	[RuleVersion(0)]
	public TypeSpecifierContext typeSpecifier() {
		TypeSpecifierContext _localctx = new TypeSpecifierContext(Context, State);
		EnterRule(_localctx, 26, RULE_typeSpecifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 137;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 14L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclaratorListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclaratorContext[] declarator() {
			return GetRuleContexts<DeclaratorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclaratorContext declarator(int i) {
			return GetRuleContext<DeclaratorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(VariableDeclarationParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(VariableDeclarationParser.COMMA, i);
		}
		public DeclaratorListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaratorList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVariableDeclarationListener typedListener = listener as IVariableDeclarationListener;
			if (typedListener != null) typedListener.EnterDeclaratorList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVariableDeclarationListener typedListener = listener as IVariableDeclarationListener;
			if (typedListener != null) typedListener.ExitDeclaratorList(this);
		}
	}

	[RuleVersion(0)]
	public DeclaratorListContext declaratorList() {
		DeclaratorListContext _localctx = new DeclaratorListContext(Context, State);
		EnterRule(_localctx, 28, RULE_declaratorList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 139;
			declarator();
			State = 144;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 140;
				Match(COMMA);
				State = 141;
				declarator();
				}
				}
				State = 146;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclaratorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(VariableDeclarationParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(VariableDeclarationParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InitializerContext initializer() {
			return GetRuleContext<InitializerContext>(0);
		}
		public DeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVariableDeclarationListener typedListener = listener as IVariableDeclarationListener;
			if (typedListener != null) typedListener.EnterDeclarator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVariableDeclarationListener typedListener = listener as IVariableDeclarationListener;
			if (typedListener != null) typedListener.ExitDeclarator(this);
		}
	}

	[RuleVersion(0)]
	public DeclaratorContext declarator() {
		DeclaratorContext _localctx = new DeclaratorContext(Context, State);
		EnterRule(_localctx, 30, RULE_declarator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 147;
			Match(Identifier);
			State = 150;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSIGN) {
				{
				State = 148;
				Match(ASSIGN);
				State = 149;
				initializer();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitializerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR_LITERAL() { return GetToken(VariableDeclarationParser.CHAR_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(VariableDeclarationParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IntegerLiteral() { return GetToken(VariableDeclarationParser.IntegerLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FloatingLiteral() { return GetToken(VariableDeclarationParser.FloatingLiteral, 0); }
		public InitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initializer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IVariableDeclarationListener typedListener = listener as IVariableDeclarationListener;
			if (typedListener != null) typedListener.EnterInitializer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IVariableDeclarationListener typedListener = listener as IVariableDeclarationListener;
			if (typedListener != null) typedListener.ExitInitializer(this);
		}
	}

	[RuleVersion(0)]
	public InitializerContext initializer() {
		InitializerContext _localctx = new InitializerContext(Context, State);
		EnterRule(_localctx, 32, RULE_initializer);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 152;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 503316480L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 10: return mathExpr_sempred((MathExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool mathExpr_sempred(MathExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 6);
		case 1: return Precpred(Context, 5);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,33,155,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,1,0,1,0,5,0,37,8,0,10,0,12,0,40,9,0,1,1,1,1,1,1,1,
		1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,58,8,2,1,2,3,2,61,
		8,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,70,8,3,1,3,1,3,1,4,4,4,75,8,4,11,4,
		12,4,76,1,5,1,5,1,5,4,5,82,8,5,11,5,12,5,83,1,5,1,5,1,5,1,5,1,6,1,6,1,
		6,1,6,1,6,1,6,1,7,1,7,5,7,98,8,7,10,7,12,7,101,9,7,1,8,1,8,1,8,1,9,1,9,
		1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,3,10,119,8,10,1,10,
		1,10,1,10,1,10,1,10,1,10,5,10,127,8,10,10,10,12,10,130,9,10,1,11,1,11,
		1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,14,5,14,143,8,14,10,14,12,14,
		146,9,14,1,15,1,15,1,15,3,15,151,8,15,1,16,1,16,1,16,0,1,20,17,0,2,4,6,
		8,10,12,14,16,18,20,22,24,26,28,30,32,0,5,1,0,31,32,1,0,29,30,1,0,10,15,
		1,0,1,3,1,0,25,28,153,0,38,1,0,0,0,2,41,1,0,0,0,4,60,1,0,0,0,6,62,1,0,
		0,0,8,74,1,0,0,0,10,81,1,0,0,0,12,89,1,0,0,0,14,99,1,0,0,0,16,102,1,0,
		0,0,18,105,1,0,0,0,20,118,1,0,0,0,22,131,1,0,0,0,24,135,1,0,0,0,26,137,
		1,0,0,0,28,139,1,0,0,0,30,147,1,0,0,0,32,152,1,0,0,0,34,37,3,2,1,0,35,
		37,3,4,2,0,36,34,1,0,0,0,36,35,1,0,0,0,37,40,1,0,0,0,38,36,1,0,0,0,38,
		39,1,0,0,0,39,1,1,0,0,0,40,38,1,0,0,0,41,42,3,26,13,0,42,43,3,28,14,0,
		43,44,5,21,0,0,44,3,1,0,0,0,45,46,5,4,0,0,46,47,5,16,0,0,47,48,3,22,11,
		0,48,49,5,17,0,0,49,50,5,18,0,0,50,51,3,14,7,0,51,57,5,19,0,0,52,53,5,
		5,0,0,53,54,5,18,0,0,54,55,3,14,7,0,55,56,5,19,0,0,56,58,1,0,0,0,57,52,
		1,0,0,0,57,58,1,0,0,0,58,61,1,0,0,0,59,61,3,6,3,0,60,45,1,0,0,0,60,59,
		1,0,0,0,61,5,1,0,0,0,62,63,5,6,0,0,63,64,5,16,0,0,64,65,5,24,0,0,65,66,
		5,17,0,0,66,67,5,18,0,0,67,69,3,8,4,0,68,70,3,12,6,0,69,68,1,0,0,0,69,
		70,1,0,0,0,70,71,1,0,0,0,71,72,5,19,0,0,72,7,1,0,0,0,73,75,3,10,5,0,74,
		73,1,0,0,0,75,76,1,0,0,0,76,74,1,0,0,0,76,77,1,0,0,0,77,9,1,0,0,0,78,79,
		5,7,0,0,79,80,5,24,0,0,80,82,5,20,0,0,81,78,1,0,0,0,82,83,1,0,0,0,83,81,
		1,0,0,0,83,84,1,0,0,0,84,85,1,0,0,0,85,86,5,18,0,0,86,87,3,14,7,0,87,88,
		5,19,0,0,88,11,1,0,0,0,89,90,5,8,0,0,90,91,5,20,0,0,91,92,5,18,0,0,92,
		93,3,14,7,0,93,94,5,19,0,0,94,13,1,0,0,0,95,98,3,18,9,0,96,98,3,16,8,0,
		97,95,1,0,0,0,97,96,1,0,0,0,98,101,1,0,0,0,99,97,1,0,0,0,99,100,1,0,0,
		0,100,15,1,0,0,0,101,99,1,0,0,0,102,103,5,9,0,0,103,104,5,21,0,0,104,17,
		1,0,0,0,105,106,5,24,0,0,106,107,5,23,0,0,107,108,3,20,10,0,108,109,5,
		21,0,0,109,19,1,0,0,0,110,111,6,10,-1,0,111,119,5,27,0,0,112,119,5,28,
		0,0,113,119,5,24,0,0,114,115,5,16,0,0,115,116,3,20,10,0,116,117,5,17,0,
		0,117,119,1,0,0,0,118,110,1,0,0,0,118,112,1,0,0,0,118,113,1,0,0,0,118,
		114,1,0,0,0,119,128,1,0,0,0,120,121,10,6,0,0,121,122,7,0,0,0,122,127,3,
		20,10,7,123,124,10,5,0,0,124,125,7,1,0,0,125,127,3,20,10,6,126,120,1,0,
		0,0,126,123,1,0,0,0,127,130,1,0,0,0,128,126,1,0,0,0,128,129,1,0,0,0,129,
		21,1,0,0,0,130,128,1,0,0,0,131,132,3,20,10,0,132,133,3,24,12,0,133,134,
		3,20,10,0,134,23,1,0,0,0,135,136,7,2,0,0,136,25,1,0,0,0,137,138,7,3,0,
		0,138,27,1,0,0,0,139,144,3,30,15,0,140,141,5,22,0,0,141,143,3,30,15,0,
		142,140,1,0,0,0,143,146,1,0,0,0,144,142,1,0,0,0,144,145,1,0,0,0,145,29,
		1,0,0,0,146,144,1,0,0,0,147,150,5,24,0,0,148,149,5,23,0,0,149,151,3,32,
		16,0,150,148,1,0,0,0,150,151,1,0,0,0,151,31,1,0,0,0,152,153,7,4,0,0,153,
		33,1,0,0,0,14,36,38,57,60,69,76,83,97,99,118,126,128,144,150
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
